struct appdata {
	float4 pos : POSITION;
	float3 norm : NORMAL;
	float4 col : COLOR0;
	float2 uv0 : TEXCOORD0;
};

struct vert2frag_ambient {
	float4 pos : POSITION;
	float4 col : COLOR0;
	float2 uv0 : TEXCOORD0;
	float  clip : TEXCOORD1;
};

struct vert2frag_perpixel {
	float4 pos : POSITION;
	float4 col : COLOR0;
	float2 uv0 : TEXCOORD0;
	float3 epos : TEXCOORD1;
	float3 norm : TEXCOORD2;
};

struct appdata_hwanimation {
	float4 pos : POSITION;
	float3 norm : NORMAL;
	float4 col : COLOR0;
	float2 uv0 : TEXCOORD0;
	float4 pos1 : TEXCOORD1;
};

struct appdata_bump {
	float4 pos : POSITION;
	float3 norm : NORMAL;
	float4 col : COLOR0;
	float2 uv0 : TEXCOORD0;
	float3 tangent : TEXCOORD1;
};

struct vert2frag_bump {
	float4 pos : POSITION;
	float4 col : COLOR0;
	float2 uv0 : TEXCOORD0;
	float4 lightpos : TEXCOORD1;
	float3 epos : TEXCOORD2;
};

struct appdata_refl {
	float4 pos : POSITION;
	//float3 norm : NORMAL;
	float4 col : COLOR0;
	float2 uv0 : TEXCOORD0; // main texture and bump mapping
};

struct vert2frag_refl {
	float4 pos : POSITION;
	float4 col : COLOR0;
	float2 uv0 : TEXCOORD0; // main texture
	//float3 norm : TEXCOORD1;
	//float4 uv2 : TEXCOORD2; // used for render-to-texture
	float4 uv1 : TEXCOORD1; // used for render-to-texture
	/*float3 norm : TEXCOORD2;
	float3 epos : TEXCOORD3;
	float4 lightpos : TEXCOORD4;*/
	float3 epos : TEXCOORD2;
	float4 lightpos : TEXCOORD3;
};

struct pixel {
	float4 color : COLOR;
};

// GL Matrices, bound to constant registers for tracking
struct cgglMatrix {
	uniform float4x4 ModelViewProj :C0; //Projection * Modelview matrix
	uniform float4x4 ModelViewIT   :C4; //Modelview inverse transform
	uniform float4x4 ModelView     :C8; //Modelview matrix
};

// GL Lights
struct cgglLight {
	uniform float4   LightVec;      //Light direction in eye space
	uniform float4   LightPos;      //Light position in eye space
	uniform float4   DiffLight;     //Diffuse light
	uniform float4   SpecLight;     //Specular light
	uniform float4   AmbLight;      //Ambient light
	uniform float3   AttenLight;    //the attenuation terms: constant, linear, quadradic
	uniform float2   SpotLight;     //spot light parameters: cos(spot cuttoff angle), spot power
};

float4 light_ambient(cgglLight lt, float4 col) {
	float4 outCol = lt.AmbLight*col; //ambient term
	return outCol;
}

float4 light_directional(float3 epos, float3 norm, cgglLight lt, float4 col,float4 material_specular) {
	float3 lightDir = normalize(lt.LightVec.xyz);
	float3 vdir = normalize(-epos);
	float3 halfv = normalize(vdir - lightDir);
	//float specular_exponent = 16;
	float specular_exponent = 64;
	//float specular_exponent = 256;
	float4 coeffs = lit(dot(norm, - lightDir), dot(norm,halfv), specular_exponent);

	float4 outCol = lt.AmbLight*col +      //ambient term
		lt.DiffLight*col*coeffs.y +    //diffuse term
		lt.SpecLight*material_specular*coeffs.z //specular term
		//0
		;
	return outCol;
}

float4 light_point(float3 epos, //the eye space vertex position
	float3 norm, //the vertex normal
	cgglLight lt, //the light
	float4 col,
	float4 material_specular) {

	float3 vert2light = lt.LightPos.xyz - epos; //vector from vertex to the light

	float d = length(vert2light); //distance between the two, need this for attenuation
	float3 ldir = vert2light/d; //light direction
	float3 vdir = normalize(-epos); //view direction
	float3 halfv = normalize(ldir + vdir); //halfway vector
	
	// Compute the diffuse and specular coefficients
	//  the diffuse cosine is in coeffs.y, the specular is in coeffs.z
	//float specular_exponent = 16;
	float specular_exponent = 64;
	float4 coeffs = lit(dot(norm,ldir), dot(norm,halfv), specular_exponent);
	
	// Compute the standard shading model
	float4 outCol = 1/(lt.AttenLight.x + d*lt.AttenLight.y + d*d*lt.AttenLight.z) *   //attenuation term
		( lt.AmbLight*col +              //ambient term
		  lt.DiffLight*col*coeffs.y +    //diffuse term
		  lt.SpecLight*material_specular*coeffs.z //specular term
		  //0.0
		);
	return outCol;
}

vert2frag_ambient main_ambient_vs(appdata IN,
		uniform cgglMatrix mx,
		uniform cgglLight lt,
		uniform float4 material_color,
		uniform float4 clipping_plane) {

	vert2frag_ambient OUT;
	float4 pos = IN.pos;
	OUT.pos = mul(mx.ModelViewProj, pos);

	float4 color = light_ambient(lt, IN.col * material_color);
	OUT.col = color;

	OUT.uv0 = IN.uv0;

	float4 epos = mul(mx.ModelView, pos); // keep
	OUT.clip = dot(clipping_plane.xyz, epos.xyz) - clipping_plane.w; // keep

	return OUT;
}

vert2frag_ambient main_ambient_hwanimation_vs(appdata_hwanimation IN,
		uniform cgglMatrix mx,
		uniform cgglLight lt,
		uniform float4 material_color,
		uniform float4 clipping_plane,
		uniform float frame_alpha
		) {

	vert2frag_ambient OUT;
	float4 pos = (1.0 - frame_alpha) * IN.pos + frame_alpha * IN.pos1;
	OUT.pos = mul(mx.ModelViewProj, pos);

	float4 color = light_ambient(lt, IN.col * material_color);
	OUT.col = color;

	OUT.uv0 = IN.uv0;

	float4 epos = mul(mx.ModelView, pos); // keep
	OUT.clip = dot(clipping_plane.xyz, epos.xyz) - clipping_plane.w; // keep

	return OUT;
}

float4 ps_texture(uniform sampler2D texture, float2 uv, float4 in_color) {
	float4 tex_color = tex2D( texture, uv );
	float4 out_color = tex_color * in_color;
	return out_color;
	//return in_colour;
}

pixel main_ambient_ps(vert2frag_ambient IN,
		uniform sampler2D texture : TEXUNIT0,
		uniform int textureID
		) {

	clip(IN.clip); // always passing the clip value gives a very slight slowdown, but probably not worth worrying about having a separate shader

	pixel OUT;
	if( textureID != 0 ) {
		OUT.color = ps_texture(texture, IN.uv0, IN.col);
	}
	else {
		OUT.color = IN.col;
	}

	/*OUT.color.r = 255;
	OUT.color.g = 255;
	OUT.color.b = 255;
	OUT.color.a = 255;*/
	return OUT;
}

	// fog disabled for performance reasons
	// todo: add a separate shader for fog
	/*if( fog.type == 1 ) {
		// untested
		float fog_start = fog.parms[0];
		float fog_end = fog.parms[1];
		//float depth = length(IN.epos);
		//float depth = - IN.epos.z;
		float depth = IN.fog;
		float alpha = saturate( ( depth - fog_start ) / ( fog_end - fog_start ) );
		OUT.color = lerp(OUT.color, fog.color, alpha);
	}
	else if( fog.type == 2 ) {
		float fog_density = fog.parms[2];
		//float depth = length(IN.epos);
		//float depth = - IN.epos.z;
		float depth = IN.fog;
		float alpha = 1.0 - exp( - fog_density * depth );
		OUT.color = lerp(OUT.color, fog.color, alpha);
	}
	else if( fog.type == 3 ) {
		// untested
		float fog_density = fog.parms[2];
		//float depth2 = dot(IN.epos,IN.epos);
		//float depth2 = IN.epos.z * IN.epos.z;
		float depth2 = IN.fog * IN.fog;
		float alpha = 1.0 - exp( - fog_density * depth2 );
		OUT.color = lerp(OUT.color, fog.color, alpha);
	}*/

vert2frag_perpixel main_perpixel_vs(appdata IN,
		uniform cgglMatrix mx,
		uniform float4 material_color
		) {
	vert2frag_perpixel OUT;
	float4 pos = IN.pos;
	OUT.pos = mul( mx.ModelViewProj, pos );
	float4 epos = mul(mx.ModelView, pos);
	OUT.epos = epos.xyz;
	//OUT.col = IN.col;
	OUT.col = IN.col * material_color;
	OUT.uv0 = IN.uv0;

	float3 normal = (mul((float3x3)mx.ModelViewIT, IN.norm.xyz));
	OUT.norm = normal.xyz;

	return OUT;
}

vert2frag_perpixel main_perpixel_hwanimation_vs(appdata_hwanimation IN,
		uniform cgglMatrix mx,
		uniform float4 material_color,
		uniform float frame_alpha
		) {

	vert2frag_perpixel OUT;
	float4 pos = (1.0 - frame_alpha) * IN.pos + frame_alpha * IN.pos1;
	OUT.pos = mul(mx.ModelViewProj, pos);
	float4 epos = mul(mx.ModelView, pos);
	OUT.epos = epos.xyz;
	OUT.col = IN.col * material_color;
	OUT.uv0 = IN.uv0;

	float3 normal = (mul((float3x3)mx.ModelViewIT, IN.norm.xyz));
	OUT.norm = normal.xyz;

	return OUT;
}

pixel main_directional_ps(vert2frag_perpixel IN,
		uniform sampler2D texture : TEXUNIT0,
		uniform int textureID,
		uniform cgglLight lt,
		uniform float4 material_specular) {

	pixel OUT;
	float4 color = IN.col;
	if( textureID != 0 ) {
		color = ps_texture(texture, IN.uv0, color);
	}
	OUT.color = light_directional(IN.epos, IN.norm, lt, color, material_specular);

	return OUT;
}

pixel main_point_ps(vert2frag_perpixel IN,
		uniform sampler2D texture : TEXUNIT0,
		uniform int textureID,
		uniform cgglLight lt,
		uniform float4 material_specular) {

	pixel OUT;
	float3 normal = IN.norm;
	float4 color = IN.col;
	if( textureID != 0 ) {
		color = ps_texture(texture, IN.uv0, color);
	}
	OUT.color = light_point(IN.epos, normal, lt, color, material_specular);
	return OUT;
}

vert2frag_bump main_perpixel_bump_vs(appdata_bump IN,
		uniform float4 lightpos,
		uniform cgglMatrix mx) {
	vert2frag_bump OUT;

	float4 pos = IN.pos;
	OUT.pos = mul( mx.ModelViewProj, pos );
	OUT.col = IN.col;
	OUT.uv0 = IN.uv0;

	float3 normal = (mul((float3x3)mx.ModelViewIT, IN.norm.xyz));
	float3 tangent = (mul((float3x3)mx.ModelViewIT, IN.tangent));
	float3 bitangent = cross(normal, tangent);
	normal = normalize(normal);
	tangent = normalize(tangent);
	bitangent = normalize(bitangent);
	float3x3 TBNMatrix = float3x3(tangent, bitangent, normal);

	float4 epos = mul(mx.ModelView, pos);
	epos.xyz = mul(TBNMatrix, epos.xyz);
	OUT.epos = epos.xyz;

	lightpos.xyz = mul(TBNMatrix, lightpos.xyz);
	OUT.lightpos = lightpos;

	return OUT;
}

pixel main_bump_directional_ps(vert2frag_bump IN,
		uniform sampler2D texture : TEXUNIT0,
		uniform int textureID,
		uniform sampler2D bump_texture : TEXUNIT1,
		uniform cgglLight lt,
		uniform float4 material_specular) {

	pixel OUT;
	float3 normal = tex2D( bump_texture, IN.uv0 ).xyz;
	normal.x -= 0.5;
	normal.y -= 0.5;
	normal.z -= 0.5;
	normal *= 2.0;
	lt.LightVec = -IN.lightpos; // update with position in tangent space (slightly hacky, as conflating position with direction)

	float4 color = IN.col;
	if( textureID != 0 ) {
		color = ps_texture(texture, IN.uv0, color);
	}
	OUT.color = light_directional(IN.epos, normal, lt, color, material_specular);
	return OUT;
}

pixel main_bump_point_ps(vert2frag_bump IN,
		uniform sampler2D texture : TEXUNIT0,
		uniform int textureID,
		uniform sampler2D bump_texture : TEXUNIT1,
		uniform cgglLight lt,
		uniform float4 material_specular) {

	pixel OUT;
	float3 normal = tex2D( bump_texture, IN.uv0 ).xyz;
	normal.x -= 0.5;
	normal.y -= 0.5;
	normal.z -= 0.5;
	normal *= 2.0;
	lt.LightPos = IN.lightpos; // update with position in tangent space

	float4 color = IN.col;
	if( textureID != 0 ) {
		color = ps_texture(texture, IN.uv0, color);
	}
	OUT.color = light_point(IN.epos, normal, lt, color, material_specular);
	return OUT;
}

pixel main_splat_ambient_ps(vert2frag_ambient IN,
		uniform sampler2D texture : TEXUNIT0, // base texture
		uniform sampler2D secondary_texture : TEXUNIT1, // alpha map
		uniform sampler2D texture_1 : TEXUNIT2,
		uniform sampler2D texture_2 : TEXUNIT3,
		uniform sampler2D texture_3 : TEXUNIT4,
		uniform float splat_detail_scale
		) {

	clip(IN.clip); // always passing the clip value gives a very slight slowdown, but probably not worth worrying about having a separate shader

	pixel OUT;

	float2 uv_detail = IN.uv0 * splat_detail_scale;
	float4 base_color = ps_texture(texture, uv_detail, IN.col);
	float4 alpha = tex2D(secondary_texture, IN.uv0);
	float4 color_1 = ps_texture(texture_1, uv_detail, IN.col);
	float4 color_2 = ps_texture(texture_2, uv_detail, IN.col);
	float4 color_3 = ps_texture(texture_3, uv_detail, IN.col);

	OUT.color = lerp(base_color, color_1, alpha.r);
	OUT.color = lerp(OUT.color, color_2, alpha.g);
	OUT.color = lerp(OUT.color, color_3, alpha.b);

	return OUT;
}

pixel main_splat_directional_ps(vert2frag_perpixel IN,
		uniform sampler2D texture : TEXUNIT0, // base texture
		uniform sampler2D secondary_texture : TEXUNIT1, // alpha map
		uniform sampler2D texture_1 : TEXUNIT2,
		uniform sampler2D texture_2 : TEXUNIT3,
		uniform sampler2D texture_3 : TEXUNIT4,
		uniform float splat_detail_scale,
		uniform cgglLight lt,
		uniform float4 material_specular) {

	//clip(IN.clip);

	pixel OUT;
	//float4 color = light_directional(IN.epos, IN.norm, lt, IN.col, material_specular);
	float4 color = IN.col;

	float2 uv_detail = IN.uv0 * splat_detail_scale;
	float4 base_color = ps_texture(texture, uv_detail, color);
	float4 alpha = tex2D(secondary_texture, IN.uv0);
	float4 color_1 = ps_texture(texture_1, uv_detail, color);
	float4 color_2 = ps_texture(texture_2, uv_detail, color);
	float4 color_3 = ps_texture(texture_3, uv_detail, color);

	OUT.color = lerp(base_color, color_1, alpha.r);
	OUT.color = lerp(OUT.color, color_2, alpha.g);
	OUT.color = lerp(OUT.color, color_3, alpha.b);

	OUT.color = light_directional(IN.epos, IN.norm, lt, OUT.color, material_specular);
	return OUT;
}

pixel main_splat_point_ps(vert2frag_perpixel IN,
		uniform sampler2D texture : TEXUNIT0, // base texture
		uniform sampler2D secondary_texture : TEXUNIT1, // alpha map
		uniform sampler2D texture_1 : TEXUNIT2,
		uniform sampler2D texture_2 : TEXUNIT3,
		uniform sampler2D texture_3 : TEXUNIT4,
		uniform float splat_detail_scale,
		uniform cgglLight lt,
		uniform float4 material_specular) {

	//clip(IN.clip);

	pixel OUT;
	//float4 color = light_point(IN.epos, IN.norm, lt, IN.col, material_specular);
	float4 color = IN.col;

	float2 uv_detail = IN.uv0 * splat_detail_scale;
	float4 base_color = ps_texture(texture, uv_detail, color);
	float4 alpha = tex2D(secondary_texture, IN.uv0);
	float4 color_1 = ps_texture(texture_1, uv_detail, color);
	float4 color_2 = ps_texture(texture_2, uv_detail, color);
	float4 color_3 = ps_texture(texture_3, uv_detail, color);

	OUT.color = lerp(base_color, color_1, alpha.r);
	OUT.color = lerp(OUT.color, color_2, alpha.g);
	OUT.color = lerp(OUT.color, color_3, alpha.b);

	OUT.color = light_point(IN.epos, IN.norm, lt, OUT.color, material_specular);
	return OUT;
}

float shift(float coord, float disp) {
	float a = floor(coord);
	float b = ceil(coord);
	float t = coord - a;
	if( t > 0.5 ) {
		t = b - coord;
	}
	t = t * 2;
	coord = coord + t * disp;
	return coord;
}

float2 morph(float2 uv,float time,float scale) {
	float x = scale * cos(time);
	float y = scale * sin(time);
	uv.x = shift(uv.x, x);
	uv.y = shift(uv.y, y);
	return uv;
}

// Used for render-to-texture reflections (including water effect)
vert2frag_refl main_refl_vs(appdata_refl IN,
		uniform cgglMatrix mx,
		uniform float4 lightpos,
		uniform float time) {

	/*const float h = 0.05;
	const float h2 = 1.0 * h;
	const float wid = 1.0;
	const float speed = -1.0;*/

	vert2frag_refl OUT;
	OUT.pos = mul(mx.ModelViewProj, IN.pos);

	OUT.col = IN.col;

	float3 normal = float3(0.0, 1.0, 0.0);
	float4 dpos = IN.pos;
	//dpos.xy += 10.0 * normal.xz;
	//OUT.uv2 = mul(mx.ModelViewProj, dpos);
	OUT.uv1 = mul(mx.ModelViewProj, dpos);

	//OUT.norm = normalize(mul((float3x3)mx.ModelViewIT, normal));

	normal = (mul((float3x3)mx.ModelViewIT, normal));
	float3 tangent = float3(1.0, 0.0, 0.0);
	tangent = (mul((float3x3)mx.ModelViewIT, tangent));
	float3 bitangent = cross(normal, tangent);
	normal = normalize(normal);
	tangent = normalize(tangent);
	bitangent = normalize(bitangent);
	float3x3 TBNMatrix = float3x3(tangent, bitangent, normal);

	float4 epos = mul(mx.ModelView, IN.pos);
	epos.xyz = mul(TBNMatrix, epos.xyz);
	OUT.epos = epos.xyz;

	lightpos.xyz = mul(TBNMatrix, lightpos.xyz);
	OUT.lightpos = lightpos;

	// do morphing in vertex shader rather than pixel shader
	// in pixel shader, seems to cause crashes on D3D9 and/or OpenGL on Intel GMA 3100
	OUT.uv0 = IN.uv0;
	//OUT.uv0 = morph(IN.uv0, time, 0.05);
	//OUT.uv0 = morph(IN.uv0, time, 0.02);

	return OUT;
}

float fresnel(float NdotL,float fresnelBias,float fresnelPow) {
	float facing = 1.0 - NdotL;

	return max(fresnelBias + (1.0 - fresnelBias) * pow(facing, fresnelPow), 0.0); // D3D9 version
}

//const float material_bright_c = 0.4;

const float water_clearness = 0.4; // n.b., if not const, weird lighting effect bug on D3D9!

float3 get_bump_normal(uniform sampler2D bump_texture, float2 bump_uv, uniform float time) {
	const float speed = -0.01;
	bump_uv *= 0.5;
	float2 bump_uv2 = bump_uv * 0.5;
	bump_uv.x += speed * time;
	bump_uv2.y += speed * time;
	float3 bump_normal = tex2D( bump_texture, bump_uv ).xyz;
	float3 bump_normal2 = tex2D( bump_texture, bump_uv2 ).xyz;
	bump_normal = 0.5 * ( bump_normal + bump_normal2 );
	//float3 bump_normal = tex2Dlod( bump_texture, float4(bump_uv, 0.0, 0.0) ).xyz;
	bump_normal.x -= 0.5;
	bump_normal.y -= 0.5;
	bump_normal.z -= 0.5;
	bump_normal *= 2.0;
	bump_normal = normalize(bump_normal);
	return bump_normal;
}

// Used for render-to-texture reflections (including water effect)
pixel main_refl_ps(vert2frag_refl IN,
		//uniform cgglMatrix mx,
		uniform sampler2D texture : TEXUNIT0,
		uniform sampler2D secondary_texture : TEXUNIT1,
		uniform sampler2D bump_texture : TEXUNIT2,
		uniform cgglLight lt,
		uniform int isYTextureInverted,
		uniform float time
		) {

	pixel OUT;

	IN.uv1.x = IN.uv1.x / IN.uv1.w;
	IN.uv1.y = IN.uv1.y / IN.uv1.w;
	IN.uv1.x *= 0.5;
	IN.uv1.y *= 0.5;
	if( isYTextureInverted ) {
		IN.uv1.y = - IN.uv1.y; // D3D9
	}
	IN.uv1.x += 0.5;
	IN.uv1.y += 0.5;

	float3 bump_normal = get_bump_normal( bump_texture, IN.uv0, time );
	//float3 bump_normal = float3(0, 0, 1);
	//IN.norm = bump_normal;
	IN.uv1.xy += 0.05 * bump_normal.xy;
	IN.uv0.xy += 0.05 * bump_normal.xy;

	float4 color = light_ambient(lt, IN.col);
	//float2 t_uv = morph(IN.uv0, time, 0.05);
	//float4 tex_color = tex2D( texture, t_uv.xy ) * color;
	float4 tex_color = tex2D( texture, IN.uv0 ) * color;

	float4 refl_tex_color = tex2D( secondary_texture, IN.uv1.xy );

	//float3 normal = IN.norm;
	float3 normal = float3(0.0, 0.0, 1.0); // normal used for fresel shouldn't be pertubed by the waves (bump map)

	float3 epos = IN.epos;
	float3 vdir = normalize(-epos); // view direction
	float NdotL = max(dot(vdir,normal), 0.0);
	float alpha = fresnel(NdotL, 0.5, 1.0);
	OUT.color.rgb = alpha * refl_tex_color.rgb + (1.0 - alpha) * tex_color.rgb;
	OUT.color.a = alpha;
	//OUT.color.rgb = water_clearness * alpha * refl_tex_color.rgb + (1.0 - water_clearness) * tex_color.rgb;
	//OUT.color.a = 1.0 - water_clearness * (1.0 - alpha);
	//OUT.color.rgb /= OUT.color.a;
	return OUT;
}

pixel main_refl_directional_ps(vert2frag_refl IN,
		uniform sampler2D texture : TEXUNIT0,
		uniform sampler2D bump_texture : TEXUNIT2,
		uniform cgglLight lt,
		uniform float4 material_specular,
		uniform float time
		) {

	pixel OUT;

	lt.LightVec = -IN.lightpos; // update with position in tangent space (slightly hacky, as conflating position with direction)
	float3 normal = get_bump_normal( bump_texture, IN.uv0, time );
	IN.uv0.xy += 0.05 * normal.xy;
	float3 epos = IN.epos;
	//float4 color = light_directional(epos, normal, lt, IN.col, material_specular);
	float4 color = IN.col;

	//time = 0.0; // otherwise we get driver crash on Intel GMA 3150, with Direct3D9?!
	//float2 t_uv = morph(IN.uv0, time, 0.05);
	//float4 tex_color = tex2D( texture, t_uv ) * color;
	float4 tex_color = tex2D( texture, IN.uv0 ) * color;
	tex_color = light_directional(epos, normal, lt, tex_color, material_specular);
	OUT.color = (1.0 - water_clearness) * tex_color;

	return OUT;
}

pixel main_refl_point_ps(vert2frag_refl IN,
		uniform sampler2D texture : TEXUNIT0,
		uniform sampler2D bump_texture : TEXUNIT2,
		uniform cgglLight lt,
		uniform float4 material_specular,
		uniform float time
		) {

	pixel OUT;

	lt.LightPos = IN.lightpos; // update with position in tangent space
	float3 normal = get_bump_normal( bump_texture, IN.uv0, time );
	IN.uv0.xy += 0.05 * normal.xy;
	float3 epos = IN.epos;
	//float4 color = light_point(epos, normal, lt, IN.col, material_specular);
	float4 color = IN.col;
	//time = 0.0; // otherwise we get driver crash on Intel GMA 3150, with Direct3D9?!
	//float2 t_uv = morph(IN.uv0, time, 0.05);
	//float4 tex_color = tex2D( texture, t_uv ) * color;
	float4 tex_color = tex2D( texture, IN.uv0 ) * color;
	tex_color = light_point(epos, normal, lt, tex_color, material_specular);

	OUT.color = (1.0 - water_clearness) * tex_color;
	//OUT.color = float4(material_bright_c,material_bright_c,material_bright_c,1.0) * tex_color;
	return OUT;
}

// Used for water, with no reflections
/*pixel main_water_ps(vert2frag_refl IN,
		uniform sampler2D texture : TEXUNIT0,
		//uniform int textureID,
		uniform float time
		) {

	pixel OUT;
	float4 t_uv = float4(IN.uv0.x, IN.uv0.y, 0, 0);
	t_uv = morph(t_uv, time, 0.05);
	float4 tex_color = tex2D( texture, t_uv.xy );
	OUT.color = tex_color * IN.col;

	return OUT;
}*/

#if 0
vert2frag main_shadow_point_vs(appdata IN,
		uniform cgglMatrix mx,
		uniform cgglLight lt) {
	vert2frag OUT;
	float4 pos = IN.pos;

	//float4 epos = mul(mx.ModelView, IN.pos);      //The eye-space vertex position
	//float3 vert2light = lt.LightPos.xyz - epos.xyz; //vector from vertex to the light
	float3 vert2light = lt.LightPos.xyz - pos.xyz; // direction in local space
	//float d = length(vert2light); //distance between the two
	//float3 ldir = vert2light/d; //light direction

	//float3 normal = normalize(mul((float3x3)mx.ModelViewIT, IN.norm.xyz));
	//float3 normal = IN.norm.xyz;
	//float dn = length(IN.norm);
	//if( dn < 0.5 ) {
	if( dot( IN.norm.xyz, vert2light ) >= 0 ) {
	//if( IN.norm.x > 0.5 ) {
		float3 npos = ( pos.xyz - lt.LightPos.xyz ) * 100 + pos.xyz;
		pos.xyz = npos;
	}
	OUT.pos = mul( mx.ModelViewProj, pos );
	return OUT;
}
#endif
