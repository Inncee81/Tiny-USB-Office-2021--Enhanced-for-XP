struct cgglMatrix {
	uniform float4x4 ModelViewProj :C0; //Projection * Modelview matrix
	uniform float4x4 ModelViewIT   :C4; //Modelview inverse transform
	uniform float4x4 ModelView     :C8; //Modelview matrix
};

struct appdata {
	float4 pos : POSITION;
	float4 col : COLOR0;
	float2 uv0 : TEXCOORD0;
};

struct vert2frag_ambient {
	float4 pos : POSITION;
	float4 col : COLOR0;
	float2 uv0 : TEXCOORD0;
};

struct pixel {
	float4 color : COLOR;
};

vert2frag_ambient main_splat_ambient_vs(appdata IN,
		uniform cgglMatrix mx
		) {
	vert2frag_ambient OUT;
	float4 pos = IN.pos;
	OUT.pos = mul(mx.ModelViewProj, pos);
	OUT.col = IN.col;
	OUT.uv0 = IN.uv0;
	return OUT;
}

float4 ps_texture(uniform sampler2D texture, float2 uv, float4 in_color) {
	float4 tex_color = tex2D( texture, uv );
	float4 out_color = tex_color * in_color;
	return out_color;
}

float shift(float coord, float disp) {
	float a = floor(coord);
	float b = ceil(coord);
	float t = coord - a;
	if( t > 0.5 ) {
		t = b - coord;
	}
	t = t * 2;
	coord = coord + t * disp;
	return coord;
}

float2 morph(float2 uv,float time,float scale) {
	float x = scale * cos(time);
	float y = scale * sin(time);
	uv.x = shift(uv.x, x);
	uv.y = shift(uv.y, y);
	return uv;
}

pixel main_splat_ambient_ps(vert2frag_ambient IN,
		uniform sampler2D texture : TEXUNIT0, // base texture, grassland
		uniform sampler2D secondary_texture : TEXUNIT1, // alpha map
		uniform sampler2D texture_1 : TEXUNIT2, // ocean
		uniform sampler2D texture_2 : TEXUNIT3, // desert
		uniform sampler2D texture_3 : TEXUNIT4, // artic
		uniform float splat_detail_scale_w,
		uniform float splat_detail_scale_h,
		uniform float time
	) {

	pixel OUT;

	float2 uv_detail = IN.uv0;
	uv_detail.x *= splat_detail_scale_w;
	uv_detail.y *= splat_detail_scale_h;

	float2 uv_water = morph(uv_detail, time, 0.15);
	//uv_detail = uv_water;

	float4 base_color = ps_texture(texture, uv_detail, IN.col);
	float4 alpha = tex2D(secondary_texture, IN.uv0);
	//float4 color_1 = ps_texture(texture_1, uv_detail, IN.col);
	float4 color_1 = ps_texture(texture_1, uv_water, IN.col);
	float4 color_2 = ps_texture(texture_2, uv_detail, IN.col);
	float4 color_3 = ps_texture(texture_3, uv_detail, IN.col);

	OUT.color = lerp(base_color, color_1, alpha.r);
	OUT.color = lerp(OUT.color, color_2, alpha.g);
	OUT.color = lerp(OUT.color, color_3, alpha.b);
	
	return OUT;
}

// 3D shaders

pixel main_splat_ambient_3d_ps(vert2frag_ambient IN,
		uniform sampler2D texture : TEXUNIT0, // base texture
		uniform sampler2D secondary_texture : TEXUNIT1, // alpha map
		uniform sampler2D texture_1 : TEXUNIT2,
		uniform sampler2D texture_2 : TEXUNIT3,
		uniform sampler2D texture_3 : TEXUNIT4,
		uniform float splat_detail_scale,
		uniform float time
		) {
	return main_splat_ambient_ps(IN, texture, secondary_texture, texture_1, texture_2, texture_3, splat_detail_scale, splat_detail_scale, time);
	/*pixel OUT;

	float2 uv_detail = IN.uv0 * splat_detail_scale;
	float2 uv_water = morph(uv_detail, time, 0.15);
	float4 base_color = ps_texture(texture, uv_detail, IN.col);
	float4 alpha = tex2D(secondary_texture, IN.uv0);
	float4 color_1 = ps_texture(texture_1, uv_water, IN.col);
	float4 color_2 = ps_texture(texture_2, uv_detail, IN.col);
	float4 color_3 = ps_texture(texture_3, uv_detail, IN.col);

	OUT.color = lerp(base_color, color_1, alpha.r);
	OUT.color = lerp(OUT.color, color_2, alpha.g);
	OUT.color = lerp(OUT.color, color_3, alpha.b);

	return OUT;*/
}
