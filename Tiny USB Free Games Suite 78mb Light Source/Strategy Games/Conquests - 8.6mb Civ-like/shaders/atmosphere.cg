// Clouds rendering

float get_cloud_color(float color/*, float min_brightness*/, float density) {
	color = density - color*color;
	/*color = max(color, 0.0);
	color /= density;

	color *= (1.0 - min_brightness);
	color += min_brightness;*/
	/*if( color < 0.0 ) {
		color = 0.0;
	}
	else {
		color /= density;
		color *= (1.0 - min_brightness);
		color += min_brightness;
	}*/
	return color;
}

struct appdata_clouds {
	float4 pos : POSITION;
	float2 uv0 : TEXCOORD0;
};

struct vert2frag_clouds {
	float4 pos : POSITION;
	float2 uv0 : TEXCOORD0;
};

struct cgglMatrix {
	uniform float4x4 ModelViewProj :C0; //Projection * Modelview matrix
};

vert2frag_clouds main_clouds_vs(appdata_clouds IN,
		uniform cgglMatrix mx) {

	vert2frag_clouds OUT;
	float4 pos = IN.pos;
	OUT.pos = mul(mx.ModelViewProj, pos);

	OUT.uv0 = IN.uv0;

	return OUT;
}

float4 main_clouds_ps(vert2frag_clouds IN,
	uniform sampler2D texture0 : TEXUNIT0,
	uniform sampler2D texture1 : TEXUNIT1,
	uniform float min_brightness,
	uniform float density,
	uniform float2 dir0,
	uniform float2 dir1,
	uniform float3 cloud_color,
	uniform float time
	) : COLOR
{
	/*const float speed0 = 0.005;
	const float speed1 = 0.004;
	float dist0 = time * speed0;
	float dist1 = time * speed1;*/

	IN.uv0.x = IN.uv0.x + 0.1;
	float2 uv0 = IN.uv0;
	//uv0 += dist0 * dir0;
	uv0 += time * dir0;

	float2 uv1 = IN.uv0;
	//uv1 += dist1 * dir1;
	uv1 += time * dir1;

	// we need modify the colours separately, before averaging
	float color0 = tex2D(texture0, uv0).x;
	//color0 = get_cloud_color(color0, min_brightness, density);
	color0 = get_cloud_color(color0, density);
	float color1 = tex2D(texture1, uv1).x;
	//color1 = get_cloud_color(color1, min_brightness, density);
	color1 = get_cloud_color(color1, density);
	//float val = 0.5 * ( color0 + color1 );
	float val = max(color0, color1);
	//val = color0;
	float alpha = 0.0;

	/*val = density - val*val;
	if( val <= 0.0 ) {
		// no cloud here
		val = 0.0;
		alpha = 0.0;
	}
	else {
		val /= density;
		alpha = val;
		alpha *= 1.5;
		alpha = min(alpha, 1.0); // make the alpha heavier
		val *= (1.0 - min_brightness);
		val += min_brightness;
	}*/
	//alpha = val;
	if( val <= 0.0 ) {
		// no cloud here
		val = 0.0;
		alpha = 0.0;
	}
	else {
		val /= density;
		alpha = val; // alpha now between 0 and 1
		val *= (1.0 - min_brightness);
		val += min_brightness; // val now between min_brightness and 1
	}

	float3 rgb = cloud_color * val;
	//float3 rgb = float3(val, val, val);
	//float4 color = float4(rgb.r, rgb.g, rgb.b, 1.0);
	//float4 color = float4(rgb.r, rgb.g, rgb.b, val);
	float4 color = float4(rgb.r, rgb.g, rgb.b, alpha);
	return color;
}

// Atmosphere rendering

struct vert2frag_atmos {
	float4 pos : POSITION;
	float4 c0 : COLOR0; // Rayleigh
	float4 c1 : COLOR1; // Mie
	float3 t0 : TEXCOORD0;
};

// The scale depth (the altitude at which the average atmospheric density is found)
const float fScaleDepth = 0.25;

// The scale equation calculated by Vernier's Graphical Analysis
float scale(float fCos) {
	float x = 1.0 - fCos;
	return fScaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));
}

// Calculates the Mie phase function
float getMiePhase(float fCos, float fCos2, float g, float g2) {
	return 1.5 * ((1.0 - g2) / (2.0 + g2)) * (1.0 + fCos2) / pow(1.0 + g2 - 2.0*g*fCos, 1.5);
}

// Calculates the Rayleigh phase function
float getRayleighPhase(float fCos2) {
	//return 1.0;
	return 0.75 + 0.75*fCos2;
}

vert2frag_atmos main_atmos_vs(float4 pos : POSITION,
             uniform float4x4 ModelViewProj,
			 uniform float3 v3CameraPos,
			 uniform float3 v3LightPos,
			 uniform float3 v3InvWavelength,
			 uniform float fCameraHeight,
			 uniform float fInnerRadius,
			 uniform float fKrESun,
			 uniform float fKmESun,
			 uniform float fKr4PI,
			 uniform float fKm4PI,
			 uniform float fScale,
			 uniform float fScaleOverScaleDepth
			 )
{
	const int n_samples = 2;
	//const int n_samples = 1;
	
	float3 v3Pos = pos.xyz;
	/*if( v3Pos.y < v3CameraPos.y ) {
		v3Pos.y = v3CameraPos.y;
	}*/
	float3 v3Ray = v3Pos - v3CameraPos;
	if( v3Ray.y < 0.0 ) {
		v3Ray.y = 0.0;
	}

	/*if( v3Ray.y < 0 ) {
		vert2frag_atmos OUT;
		OUT.pos = mul(ModelViewProj, pos);
		OUT.c0.rgb = float3(0,0,0);
		OUT.c1.rgb = float3(0,0,0);
		OUT.t0 = v3CameraPos - v3Pos;
		return OUT;
	}*/
	
	float fFar = length(v3Ray);
	v3Ray /= fFar;

	float3 v3Start = v3CameraPos;
	float fHeight = length(v3Start);
	float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fCameraHeight));
	float fStartAngle = dot(v3Ray, v3Start) / fHeight;
	float fStartOffset = fDepth*scale(fStartAngle);

	float fSampleLength = fFar / (float)n_samples;
	float fScaledLength = fSampleLength * fScale;
	float3 v3SampleRay = v3Ray * fSampleLength;
	float3 v3SamplePoint = v3Start + v3SampleRay * 0.5;

	float3 v3FrontColor = float3(0.0, 0.0, 0.0);
	for(int i=0;i<n_samples;i++) {
		float fHeight = length(v3SamplePoint);
		float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));
		float fLightAngle = dot(v3LightPos, v3SamplePoint) / fHeight;
		float fCameraAngle = dot(v3Ray, v3SamplePoint) / fHeight;
		float fScatter = fStartOffset + fDepth*(scale(fLightAngle) - scale(fCameraAngle));
		float3 v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI));
		v3FrontColor += v3Attenuate * (fDepth * fScaledLength);
		v3SamplePoint += v3SampleRay;
	}

	vert2frag_atmos OUT;
	OUT.pos = mul(ModelViewProj, pos);
	/*OUT.pos = pos;
	OUT.pos.x = - OUT.pos.x;
	OUT.pos.y = - OUT.pos.y;*/
	OUT.c0.rgb = v3FrontColor * (v3InvWavelength * fKrESun);
	OUT.c1.rgb = v3FrontColor * fKmESun;
	/*OUT.c0.rgb = v3FrontColor;
	OUT.c1.rgb = v3FrontColor;*/
	OUT.t0 = v3CameraPos - v3Pos;
	return OUT;
}

float4 main_atmos_ps(vert2frag_atmos IN,
			uniform float3 v3LightPos,
			uniform float g,
			uniform float g2) : COLOR
{
	//clip(-IN.t0.y);
	float3 v3Direction = IN.t0;
	/*if( v3Direction.y > 0.0 ) {
		v3Direction.y = 0.0;
	}*/
	float fCos = dot(v3LightPos, v3Direction) / length(v3Direction);
	//float fCos = 1.0;
	float fCos2 = fCos*fCos;
	float4 color = getRayleighPhase(fCos2) * IN.c0 + getMiePhase(fCos, fCos2, g, g2) * IN.c1;
	//float4 color = getRayleighPhase(fCos2) * IN.c0;
	//float4 color = getMiePhase(fCos, fCos2, g, g2) * IN.c1;
	// we don't need the alpha channel, so set it to 1
	//color.a = color.b;
	color.a = 1.0;
	//float4 color;
	/*color.r = 1.0;
	color.g = 0.0;
	color.b = 0.0;
	color.a = 0.0;*/
	/*if( v3Direction.y > 0.0 ) {
		color.r = 1.0;
		color.g = 0.0;
		color.b = 0.0;
		color.a = 1.0;
	}*/
	return color;
}
