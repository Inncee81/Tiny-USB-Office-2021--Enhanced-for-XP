struct appdata {
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

struct vert2frag {
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

struct pixel {
	float4 color : COLOR;
};

vert2frag main_hdr_vs(appdata IN) {
	vert2frag OUT;
	OUT.pos = IN.pos;
	OUT.uv = IN.uv;
	return OUT;
}

float4 getHDRColor(float4 color) {
	//const float exposure = 10.0;
	const float exposure = 1.2;

	// Reinhard1:
	//color = color / ( (1.0/exposure) + color );

	// Exponential:
	color = 1.0 - exp( - exposure * color );
	return color;
}

pixel main_hdr_ps(vert2frag IN,
		uniform sampler2D texture : TEXUNIT0,
		uniform float tx_step_x,
		uniform float tx_step_y
		) {

	pixel OUT;
	float4 color = tex2D( texture, IN.uv );
	/*OUT.color = color;
	return OUT;*/

	/*const int hsize = 1;
	float blur_weights[9] = {1.0, 2.0, 1.0, 2.0, 4.0, 2.0, 1.0, 2.0, 1.0};
	const float total_weight = 16.0;*/
	/*const int hsize = 2;
	float blur_weights[25] = {
		0.25, 0.5, 1.0, 0.5, 0.25,
		0.5, 1.0, 2.0, 1.0, 0.5,
		1.0, 2.0, 4.0, 2.0, 1.0,
		0.5, 1.0, 2.0, 1.0, 0.5,
		0.25, 0.5, 1.0, 0.5, 0.25
		};
	const float total_weight = 25.0;*/

	/*float3 bloom_color = float3(0.0,0.0,0.0);
	for(int y=-hsize,n_samples=0;y<=hsize;y++) {
		for(int x=-hsize;x<=hsize;x++,n_samples++) {
			float2 samp_uv = IN.uv;
			samp_uv.x += x * tx_step_x;
			samp_uv.y += y * tx_step_y;
			float3 samp_color = tex2D( texture, samp_uv ).rgb;
			samp_color *= blur_weights[n_samples];
			bloom_color += samp_color;
		}
	}
	bloom_color /= total_weight;

	float3 lum_weight = float3(0.3, 0.58, 0.12);
	float luminance = dot(bloom_color.rgb, lum_weight);
	if( luminance > 1.0 ) {
		color.rgb = bloom_color;
		//color.r += 1.0;
	}*/

	OUT.color = getHDRColor(color);
	//OUT.color = color;

	//OUT.color.r = 1.0;
	//OUT.color.g = 0.0;
	//OUT.color.b = 1.0;
	return OUT;
}

/*const int size = 1;
float blur_weights[3] = {1.0, 2.0, 1.0};
const float total_weight = 4.0;*/
/*const int size = 2;
float blur_weights[5] = {1.0, 2.0, 4.0, 2.0, 1.0};
const float total_weight = 10.0;*/
const int size = 3;
float blur_weights[7] = {1.0, 2.0, 4.0, 8.0, 4.0, 2.0, 1.0};
const float total_weight = 22.0;

const float3 lum_weight = float3(0.3, 0.58, 0.12);

pixel main_blurw_ps(vert2frag IN,
		uniform sampler2D texture : TEXUNIT0,
		uniform float tx_step_x
		) {

	pixel OUT;
	float4 color = tex2D( texture, IN.uv );

	float3 bloom_color = float3(0.0,0.0,0.0);
	for(int x=-size,n_samples=0;x<=size;x++,n_samples++) {
		float2 samp_uv = IN.uv;
		samp_uv.x += x * tx_step_x;
		float3 samp_color = tex2D( texture, samp_uv ).rgb;
		samp_color *= blur_weights[n_samples];
		bloom_color += samp_color;
	}
	bloom_color /= total_weight;

	float luminance = dot(bloom_color.rgb, lum_weight);
	if( luminance > 1.0 )
	{
		color.rgb = bloom_color;
		/*color.r = 100.0;
		color.b = 100.0;*/
	}

	OUT.color = color;

	//OUT.color.r = 1.0;
	//OUT.color.g = 1.0;
	//OUT.color.b = 1.0;
	return OUT;
}

pixel main_blurh_hdr_ps(vert2frag IN,
		uniform sampler2D texture : TEXUNIT0,
		uniform float tx_step_y
		) {

	pixel OUT;
	float4 color = tex2D( texture, IN.uv );

	float3 bloom_color = float3(0.0,0.0,0.0);
	for(int y=-size,n_samples=0;y<=size;y++,n_samples++) {
		float2 samp_uv = IN.uv;
		samp_uv.y += y * tx_step_y;
		float3 samp_color = tex2D( texture, samp_uv ).rgb;
		samp_color *= blur_weights[n_samples];
		bloom_color += samp_color;
	}
	bloom_color /= total_weight;

	float luminance = dot(bloom_color.rgb, lum_weight);
	if( luminance > 1.0 )
	{
		color.rgb = bloom_color;
		/*color.r = 100.0;
		color.b = 100.0;*/
	}

	OUT.color = getHDRColor(color);
	//OUT.color = color;

	//OUT.color.r = 1.0;
	//OUT.color.g = 1.0;
	//OUT.color.b = 1.0;
	return OUT;
}
