// CubeScript placed in this file is automatically executed on each startup.

persistidents 0

const MODES [demo coop dm ctf stf htf ktf bomber zombies overload ]
const MODEALIASES [map sendmap lms vip zombie]

// "editent" command:
// This command collects all the attributes of the nearest entity, and then
// prompts that into a handy command that allows you to edit that entities
// attributes easily.
// Note: The editent command can NOT define rotation/yaw inside the command!
// However, the current yaw of the player will define the rotation/yaw when
// using the command!
const editent [
  if $editing [
    if (strcmp (getenttype) mapmodel) [ saycommand "/entset" (getenttype) (getentattr 1) (getentattr 2) (getentattr 3) ] [
      if (> (findlist [light sound clip plclip] (getenttype)) -1) [
        saycommand "/entset" (getenttype) (getentattr 0) (getentattr 1) (getentattr 2) (getentattr 3)
      ] [
        saycommand "/entset" (getenttype) (getentattr ((> (findlist [playerstart ctf-flag] (getenttype)) -1)))
      ]
    ]
  ]
]

// "convertclips" command:
// This command automatically changes the a "clip" to a "plclip" entity or vice-versa.
const convertclips [
  if $editing [
    if (strcmp (getenttype) clip) [ entset plclip (getentattr 0) (getentattr 1) (getentattr 2) (getentattr 3) ] [
      if (strcmp (getenttype) plclip) [ entset clip (getentattr 0) (getentattr 1) (getentattr 2) (getentattr 3) ] [
        echo No changes made. This entity isn't a clip or a plclip.; echo Try using the /closestenttype command to find a specific entity.
      ]
    ]
  ]
]

// "gibsgore" command:
// This command controls gib Speed/Number/TTL all in one variable.
const gibsgore [
  if (= $arg1 4) [ // Unrealistic
    gib 1; gibspeed 40; gibnum 100; gibttl 2500 // Turn TTL down to minimise lag...
    __gibsgore = 4
  ] [
    if (= $arg1 3) [ // Messy
      gib 1; gibspeed 15; gibnum 65; gibttl 10000
      __gibsgore = 3
    ] [
      if (= $arg1 2) [ // Good
        gib 1; gibspeed 30; gibnum 75; gibttl 5000
        __gibsgore = 2
      ] [
        if (= $arg1 1) [ // Normal
          gib 1; gibspeed 30; gibnum 6; gibttl 5000
          __gibsgore = 1
        ] [
          if (= $arg1 0) [ // Off
            gib 0
            __gibsgore = 0
          ]
        ]
      ]
    ]
  ]
]

// "fullscreenscript" command:
// This command allows swapping of fullscreen mode to be bound to a key.
const fullscreenscript [ fullscreen (! $fullscreen) ]
const editmapmsg [ saycommand (concat "/mapmsg" (addpunct (getmapmsg))) ]
const return [ result $arg1 ]
const run [ exec (concatword config/ $arg1 .cfg) ]

// Auto-completions
const mapcomplete [complete $arg1 "packages/maps/official packages/maps" cgz]
loop i (listlen (concat $MODES $MODEALIASES)) [ mapcomplete (at (concat $MODES $MODEALIASES) $i) ]
complete demo demos dmo
const entcomplete [ listcomplete $arg1 [light playerstart pistol ammobox grenades health armour akimbo mapmodel ladder ctf-flag sound clip plclip helmet] ]
entcomplete newent; entcomplete clearents; entcomplete closestenttype

// TODO:FIXME change all occurrence of SPECT(ator) to GHOST
listcomplete team [CLA RVSF CLA-SPECT RVSF-SPECT SPECTATOR]

// Game mode descriptions...
gamemodedesc 0 [Demo: Watch a replay!]
gamemodedesc 1 [Co-Operative edit: Create and edit maps with others online!]
gamemodedesc 2 [Deathmatch: Kill all your opponents and get points to win!]
gspmutdesc 2 0 [Survivor: Last combatant standing wins!]
gamemodedesc 3 [CTF: Grab the enemy flag and bring it to your base.]
gspmutdesc 3 0 [Direct: Touch your flag to invalidate it!]
gamemodedesc 4 [Secure TF: Stand by a flag to capture it! More teammates can capture faster!]
gspmutdesc 4 0 [Direct: Secure flags without overthrowing!]
gamemodedesc 5 [HTF: Defend your own flag, whilst capturing the enemy flag!]
gspmutdesc 5 0 [Strict: Your team's flag must be taken in order to score.]
gamemodedesc 6 [KTF: Hold a flag or 2 and keep it to earn points!]
gspmutdesc 6 0 [Double: Two flags in play!]
gamemodedesc 7 [Bomber: Sabotage and demolish the enemy base!]
gspmutdesc 7 0 [Demolition: First team to demolish the other wins!]
gamemodedesc 8 [Zombie: Fight endless zombies!]
gspmutdesc 8 0 [Progressive: Fight waves of zombies to preserve the human race!]
gamemodedesc 9 [Overload: Overload the enemy base!]
gspmutdesc 9 0 [Quick: Bases have less health but regenerate faster.]

mutatorsdesc 0 [Team: Watch out for teammates!]
mutatorsdesc 1 [Classic: Simulate this game's predecessor!]
mutatorsdesc 2 [Confirm: Confirm your frags; deny the enemies' kills.]
mutatorsdesc 3 [Vampire: Heal yourself by damaging the enemies!]
mutatorsdesc 4 [Convert: Killing enemies forces them to join you!]
mutatorsdesc 5 [Psychic: Everyone can see each other's location!]
mutatorsdesc 6 [Void: Play with different rendering effects!]

mutatorsdesc 7 [Juggernaut: Everyone has more health!]
mutatorsdesc 8 [Realistic: More damage for realism.]
mutatorsdesc 9 [Expert: Only headshot and gib damage can be effective!]

mutatorsdesc 10 [Insta: Use powerful sniper rifles!]
mutatorsdesc 11 [Sniping: Use a sniper rifle that is extra effective!]
mutatorsdesc 12 [Pistol: No primaries! Only a pistol for secondary, nades, and knife!]
mutatorsdesc 13 [Gibbing: Only knife and grenades can be used, which almost always gibs.]
mutatorsdesc 14 [Explosive: Use your RPG! If you run out, use your sword!]

const resetbinds [ run resetbinds; echo (c 3)All binds have been reset to default values! ]

const changeteam [ if (< (player1 team) 4) [ team (at [RVSF CLA RVSF-SPECT CLA-SPECT] (player1 team)) ] ]

const WEAPONS [KNIFE PISTOL SHOTGUN SMG SNIPER AR GRENADES AKIMBO BOLT HEAL SWORD RPG AR2 SNIPER2 SNIPER3 PISTOL2 ASSAULTP SHOTGUNP ACRP]
const CPISTOL -1 // temporary
const NUM_WEAPONS (listlen $WEAPONS)
const NUM_MODES (listlen $MODES)
const PUNCTUATION "QUOTES BRACKETS PARENTHESIS _$_ QUOTE PERCENT"
const MAX_CLIENTS 16
const MAX_BOT_MATCH_LENGTH 60
const MAX_ARGS 24
const ENT_NUM_ATTRS 4

loop g (listlen $PUNCTUATION) [ const (at $PUNCTUATION $g) $g ]
// echo (addpunct "hello world" $PARENTHESIS)     - output: (hello world)
// echo (addpunct "hello world" $BRACKETS)        - output: [hello world]

loop d $NUM_WEAPONS [ const (at $WEAPONS $d) $d ]

loop r $NUM_MODES [ const (at $MODES $r) (format [votemap %1 %2 %3] $r "$arg1" "$arg2") ]

const modenum [ result (findlist $MODES $arg1) ]

// Mode/map-setting aliases.
const votemap [ mode $arg1; map $arg2 $arg3 ]

const lms [ surv $arg1 $arg2 ]
const vip [ htf $arg1 $arg2 ]
const zombie [ zombies $arg1 $arg2 ]

// Helper aliases for (c) - easy color insertion. (e.g. echo (red)Hello (blue)world! (white)My fov today is: (orange) $fov)
loop k 10 [ const (at [green blue yellow red gray white dbrown dred purple orange] $k) (format [if (= $arg1 -1) [ result %1 ] [ result %2 ]] $k (addpunct (concat c $k) 2)) ]
// echo (blue -1)       - returns 1
// echo (purple -1)     - returns 8

const add2alias [
  if (strcmp [] (getalias $arg1)) [ $arg1 = $arg2 ] [
    $arg1 = (concat (concatword (getalias $arg1) [;]) $arg2)
  ]
]
const addOnLoadOnce   [ add2alias mapstartonce $arg1 ]
const addOnLoadAlways [ add2alias mapstartalways $arg1 ]
const addOnQuit       [ add2alias onQuit $arg1 ]
const check2init      [ if (! (checkalias $arg1)) [ $arg1 = $arg2 ] ]                   // only overwrites an alias if it doesn't exist
const check2initlist  [ loop cll (listlen $arg1) [ check2init (at $arg1 $cll) $arg2 ] ] // check2inits multiple aliases
const forceinit       [ loop fil (listlen $arg1) [ (at $arg1 $fil) = $arg2 ] ]          // forcibly overwrites multiple aliases
const checkinit       [ if (! (checkalias $arg1)) [ $arg1 = "" ]; if (> $numargs 1) [ if (! (strstr (getalias $arg1) $arg2)) [ add2alias $arg1 $arg2 ] ] ] // ensures the initialization of an alias, optionally ensures the alias contains string $arg2
const aliasinit       [ loop ail (listlen $arg1) [ checkinit (at $arg1 $ail) $arg2 ] ]  // checkinits multiple aliases
const add2list        [ if (strcmp [] (getalias $arg1)) [ $arg1 = $arg2 ] [ $arg1 = (concat (getalias $arg1) $arg2) ] ] // works exactly like concat, use as a shortcut to: alias = (concat $alias "some string")
const add2bind        [ if (! (strstr (keybind $arg1) $arg2)) [ bind $arg1 (format [%1; %2] (keybind $arg1) $arg2) ] ]  // works exactly like add2alias except for used with keybinds

// Weapon switching/action utilities.
const hasprimary [ result (= (curweapon) (currentprimary)) ]
const primary   [ weapon (currentprimary) ]
const ptoggle   [ if (hasprimary) $arg1 primary ] // Toggle between primary/specified weapon
const secondary [ weapon (currentsecondary) ]
const sndtoggle [ ptoggle secondary ]
const melee     [ weapon $KNIFE ]
const knftoggle [ ptoggle melee ]
const grenades  [ weapon $GRENADES ]
const gndtoggle [ ptoggle grenades ]

const altaction [ (concatword altaction_ (curweapon)) ]

const checkmag [ result (|| (magcontent $arg1) (magreserve $arg1)) ]
const checkrange [ result (&& (>=f $arg1 $arg2) (<=f $arg1 $arg3)) ]

const quicknadethrow_old [
  if (> (magcontent $GRENADES) 0) [
    if (!= (curweapon) $CPISTOL) grenades
    attack
  ]
  // onrelease [ sleep 1 [ if (= (curweapon) $CPISTOL) [ weapon (prevweapon) ] ] ]
]
const quickknife [
  if (> (magcontent $KNIFE) 0) [
    if (!= (curweapon) $CPISTOL) melee
    attack
  ]
  onrelease [ sleep 1 [ if (= (curweapon) $KNIFE) [ weapon (prevweapon) ] ] ]
]

loop i $NUM_WEAPONS [ (concatword altaction_ $i) = [ setscope 1; onrelease [ setscope 0 ] ] ] // Quick nade throw is default
// Use format to define altaction_N aliases from now on, makes for less edits in the future if weapon IDs change. - Bukz
// (format altaction_%1 $KNIFE) = [ if (checkmag (currentprimary)) primary [ if (|| (checkmag $PISTOL) (checkmag $AKIMBO)) secondary [ if (checkmag $GRENADES) grenades ] ] ] // Knife // uncomment to switch to primary/secondary/grenades with MOUSE2 depending on ammo content for each.
// (format altaction_%1 $CPISTOL) = [ setburst 1; onrelease [ setburst 0 ] ] // Combat pistol // TODO uncomment when this becomes a priority/testing, for now lets save an unused alias - Bukz
// (format altaction_%1 $GRENADES) = attack // Grenade // with this comment, you throw the nade and the nade is unselected : Brahma

oldsens = $sensitivity

const zoom [
  if (= $arg1 1) [
    if (! (=f $sensitivity (scopesens))) [
      oldsens = $sensitivity
      // avoid error if using 0.001 as sensitivity
      newsens = (scopesens)
      if (> (*f 1 1000) $newsens) [ if (< 1000 $newsens) [ sensitivity (scopesens) ] ]
      setscope  1
    ]
  ] [ sensitivity $oldsens; setscope 0 ]
]

weaponids_snipers = [ 4 8 13 14 ]
alias delta_game_0 [
	if (>= (isscoped) 1) [
		if (!= (findlist $weaponids_snipers (curweapon)) -1) [
			if (= $arg1 1) [
				if (< $scopezoom 950) [ scopezoom (+ $scopezoom 50) ] [ scopezoom 1000 ]
			] [
				if (> $scopezoom 50) [ scopezoom (- $scopezoom 50) ] [ scopezoom 1 ]
			]
		] [
			if (= $arg1 1) [
				if (< $adszoom 95) [ adszoom (+ $adszoom 5) ] [ adszoom 100 ]
			] [
				if (> $adszoom 6) [ adszoom (- $adszoom 5) ] [ adszoom 1 ]
			]
		]
	] [
		if (= $arg1 1) [ shiftweapon 1 ] [ shiftweapon -1 ]
	]
]

delta_game_1 = [ if (checkrange (+ $gamma $arg1) 30 300) [ gamma (+ $gamma $arg1) ] ] // Tweak gamma
delta_game_2 = [ if (checkrange (+ $fov $arg1) 75 120) [ fov (+ $fov $arg1) ] ]       // Tweak fov
delta_spect_0 = [ changefollowplayer $arg1 ]

// Map editing using the mousewheel...
modifier = 0
const domodifier [ modifier = $arg1; onrelease [ modifier = 0 ] ]

const universaldelta [
  if $editing [ s = edit ] [
    if (player1 alive) [ s = game ] [ s = spect ]
  ]
  (concatword delta _ $s _ $modifier)
]
// To utilize the below, you will need to bind "domodifier X"
// (replace X with the number of the delta_edit) to a key. To
// use them, simply hold the key that the "domodifier" is bound
// to and then scroll backwards/forwards while looking at the
// floor/ceiling.
delta_edit_0 = [ editheight $flrceil $arg1 ]		// Move cubes...
delta_edit_1 = [ if $flrceil [ vdelta $arg1 ] [ vdelta (- 0 $arg1) ] ] // Change heightfielding...
delta_edit_2 = [ edittex $flrceil $arg1 ]       // Change floor/ceiling textures...
delta_edit_3 = [ edittex (+ $flrceil 1) $arg1 ] // Change wall/upper-wall textures...
delta_edit_4 = [ equalize $flrceil ]					  // Equalize floor/ceiling...
delta_edit_5 = [ entproperty 0 $arg1 ]					// Changes the first value on entities...
delta_edit_6 = [ entproperty $editaxis $arg1 ]  // Move map entity...
delta_edit_7 = [ entproperty 1 $arg1 ]					// Changes the second value on entities...
delta_edit_8 = [ entproperty 2 $arg1 ]					// Changes the third value on entities...
delta_edit_9 = [ entproperty 3 $arg1 ]					// Changes the fourth value on entities...
delta_edit_10 = [ if (checkrange (+f $flyspeed (divf $arg1 4)) 1 5) [ flyspeed (+f $flyspeed (divf $arg1 4)); echo $flyspeed ] ] // Tweak flyspeed
delta_edit_11 = [ if (> $arg1 0) [ expandselection 1 ] [ shrinkselection 1 ] ] // Expand/shrink the current selection

// HUD toggles
const toggleshowmap [ showmap 1; onrelease [ showmap 0 ] ]

// convenient connecting from the serverbrowser
// sbconnect arg list:
// arg1 IP, arg2 port,
// arg3 1: server full
// arg4 1: password protected
// arg5 1: private mode, 2: match mode
// arg6 1: banned, 2: blacklisted 3: both
// arg7 "server description"
// TODO: interpret a#3,4,5,6 [ft:any1:2010apr04]

forceinit [sbdns sbport sbdesc sbmsg sbpwd] []
const sbconnect [
  sbdns = $arg1; sbport = $arg2; sbdesc = $arg7; forceinit [sbpwd sbmsg] []
  if (>= $arg5 1) [
    sbmsg = [This server is set to private.]; showmenu [password required]
  ] [
    if (>= $arg6 1) [
      sbmsg = [You are banned from this server.]; showmenu [password required]
    ] [
      if (= $arg4 1) [
        sbmsg = [This server is password-protected.]; showmenu [password required]
      ] [
        echo connecting to $arg7; connect $arg1 $arg2;
      ]
    ]
  ]
]

// answer last PM
const quickanswer [ if (>= $lastpm 0) [ saycommand (concat /pm $lastpm []) ] [ saycommand (concat /pm []) ] ]

// For those players who use IRC too much...
const join [ connect $arg1 $arg2 $arg3 ]
const reconnect [ if $numargs [ svpass = $arg1 ] [ svpass = [] ]; if $connected [ svdata = (curserver); afterdisconnect [ connect (at $svdata 0) (at $svdata 1) $svpass ] ] ]
const dlmap [ getmap $arg1 [ sleep 2500 (concat map $arg1) ] ]
const rndmap [ result (at $defaultmaps (rnd (listlen $defaultmaps))) ]
const rrnd [ + (rnd (- $arg2 $arg1)) $arg1 ]
const ++ [ if (checkalias $arg1) [ += $arg1 1 ] ]
const -- [ if (checkalias $arg1) [ -= $arg1 1 ] ]
const ++f [ if (checkalias $arg1) [ +=f $arg1 1 ] ]
const --f [ if (checkalias $arg1) [ -=f $arg1 1 ] ]
const listaverage [ if (listlen $arg1) [ tmp_sum = 0; loop gsl (listlen $arg1) [ +=f tmp_sum (at $arg1 $gsl) ]; result (divf $tmp_sum (listlen $arg1)) ] ]

forceinit [cp_entbuf cp_entstr] NULL
const get_ent_attrs [ cp_entbuf = (getenttype); loop gea $ENT_NUM_ATTRS [ add2list cp_entbuf (getentattr $gea) ] ]

const copyent [
  if $editing [
    get_ent_attrs
    cp_entstr = (concatword (orange) "(" (at $cp_entbuf 0) [ ] (at $cp_entbuf 1) [ ] (at $cp_entbuf 2) [ ] (at $cp_entbuf 3) [ ] (at $cp_entbuf 4) ")" (white)) // Output (a string): (enttype param1 param2 param3 param4)
    echo (blue)Note: (white)The current closest entity: $cp_entstr - has been copied.
  ]
]

const pasteent [
  if $editing [
    if (strcmp (at $cp_entbuf 0) mapmodel) [
      newent (at $cp_entbuf 0) (at $cp_entbuf 2) (at $cp_entbuf 3) (at $cp_entbuf 4)
    ] [
      newent (at $cp_entbuf 0) (at $cp_entbuf 1) (at $cp_entbuf 2) (at $cp_entbuf 3) (at $cp_entbuf 4)
    ]
    echo (blue)Note: (white)The previously copied entity: $cp_entstr - has been pasted.
  ]
]

// genhex - Randomly generates a valid hexadecimal color value (e.g. 0x2FCAF1) - useful for finding fogcolours.
const genhex [
  tmp_hex = 0x
  loop ghl 6 [
    if (rnd 2) [ tmp_hex = (concatword $tmp_hex (rnd 10)) ] [ tmp_hex = (concatword $tmp_hex (at [A B C D E F] (rnd 6))) ]
  ]
  echo (red)Trying hexadecimal color: (white) $tmp_hex
  result $tmp_hex
]

// genwc - Randomly generates a valid watercolour value (e.g. 2 17 29) - useful for finding watercolours.
const genwc [
  if $editing [
    tmp_wc = []
    loop gwl 3 [ add2list tmp_wc (rrnd 1 256) ]
    echo (red)Trying water color: (white) $tmp_wc
    watercolour (at $tmp_wc 0) (at $tmp_wc 1) (at $tmp_wc 2)
  ]
]

// gencl - Randomly generates a valid coloured light.
const gencl [
  if $editing [
    tmp_numargs = $numargs; tmp_cl = []
    loop gcl 3 [ add2list tmp_cl (rrnd 1 256) ]
    if $tmp_numargs [
      if (|| (!= (selx) 0) (!= (sely) 0)) [
        echo (red)Trying colored light: (white) $arg1 (at $tmp_cl 0) (at $tmp_cl 1) (at $tmp_cl 2)
        newent light $arg1 (at $tmp_cl 0) (at $tmp_cl 1) (at $tmp_cl 2)
      ] [ echo (red)Error: (white)If an argument "(radius)" is given for (concatword (blue) gencl (red) ,) you must select a cube first. ]
    ] [
      if (strcmp (getenttype) light) [
        echo (red)Trying colored light: (white) (getentattr 0) (at $tmp_cl 0) (at $tmp_cl 1) (at $tmp_cl 2)
        entset light (getentattr 0) (at $tmp_cl 0) (at $tmp_cl 1) (at $tmp_cl 2)
      ] [ echo (red)Error: (white)The current closest entity: (orange) (getenttype) (white)is not a light. ]
    ]
  ] [ echo (red)Error: (white)You must be in edit mode for (blue)gencl (white)to function. ]
]

//    /expandselection 1    // makes the current selection bigger by 1 cube on all sides
const expandselection [
  if $numargs [
    et1 = $arg1
    if (> $et1 0) [
      ep1 = (selx)
      ep2 = (sely)
      eps1 = (selxs)
      eps2 = (selys)
      select (- $ep1 $et1) (- $ep2 $et1) (+ $eps1 (* $et1 2)) (+ $eps2 (* $et1 2))
      result 1
    ] [ result 0 ]
  ] [ result 0 ]
]

//    /shrinkselection 1    // makes the current selection smaller by 1 cube on all sides
const shrinkselection [
  if $numargs [
    st1 = $arg1
    if (> $st1 0) [
      sp1 = (selx)
      sp2 = (sely)
      sps1 = (selxs)
      sps2 = (selys)
      sps1 = (- $sps1 (* $st1 2))
      sps2 = (- $sps2 (* $st1 2))
      if (&& (> $sps1 0) (> $sps2 0)) [
        select (+ $sp1 $st1) (+ $sp2 $st1) $sps1 $sps2
        result 1
      ] [ result 0 ]
    ] [ result 0 ]
  ] [ result 0 ]
]

// megabind - Binds a key to many different actions depending on the current game state.
const megabind [ if (> $numargs 5) [ bind $arg1 (format "if (watchingdemo) [ %1 ] [ if (|| $editing (= $gamemode 1)) [ %2 ] [ if $connected [ %3 ] [ if (curmodeattr bot) [ %4 ] [ %5 ] ] ] ]" $arg2 $arg3 $arg4 $arg5 $arg6) ] ]

// storesets - Generates an alias (list) of the current values for the given CVARs.
const storesets [
  if (> $numargs 1) [
    badargs = 0; $arg2 = []
    loop ssl (listlen $arg1) [
      if (isIdent (at $arg1 $ssl)) [
        add2list $arg2 (getalias (at $arg1 $ssl))
      ] [ badargs = 1; break ]
    ]
    if $badargs [ delalias $arg2; echo (red)Error: (white)Bad "argument(s)" given! ]
  ]
]

// makeshift "?" operator for cubescript
// ex: /? (> $maxroll 0) [voicecom negative D:] [voicecom yes :D]
//     /echo I am (? (>= (player1 health) 50) [result healthy] [result weak]) atm
? = [
  if (> $numargs 1) [
    if (> $numargs 2) [
      if $arg1 $arg2 $arg3
    ] [
      if $arg1 $arg2
    ]
  ]
]

// switch - Takes an integer argument to determine which block of code to execute.
//          NOTE: This command can only handle up to 23 "cases" (24 arguments).
switch = [
  if (&& (<= $numargs $MAX_ARGS) (checkrange $arg1 0 (- $MAX_ARGS 2))) [
    execute (getalias (format arg%1 (+ $arg1 2)))
  ]
]

// cleanshot - Take a "clean" screenshot with no HUD items.
const cs_sets [clockdisplay crosshairsize hidecompass hideconsole hideobits hidectfhud hidedamageindicator hidehudequipment hidehudmsgs hidehudtarget hideradar hidespecthud hideteam hidevote hudgun nametagfade specthudgun showstats showtargetname showgrid showclips accuracy waypointsize]
const cs_newsets [0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0]

const disablehud [ storesets $cs_sets tmp_old_sets; loop csl (listlen $cs_sets) [ (at $cs_sets $csl) (at $cs_newsets $csl) ]; if $editing [ seteditshow 0 ] ]
const enablehud  [ if (checkalias tmp_old_sets) [ loop ros (listlen $cs_sets) [ (at $cs_sets $ros) (at $tmp_old_sets $ros) ]; if $editing seteditshow ] ]
const cleanshot  [ disablehud; sleep 200 screenshot; sleep 500 enablehud ]

// highestcn - Returns the highest valid client number available.
const highestcn [
  hcn = -1
  if $connected [ nl = (+ $MAX_CLIENTS 1) ] [ if (curmodeattr bot) [ nl = 100 ] [ nl = 1 ] ]
  loop h $nl [
    if (isclient $h) [ hcn = $h ]
  ]
  result $hcn
]

// convertcase - Zap lists of strings to lower/uppercase.
const convertcase [
  if (> $numargs 1) [
    tmpCCO = []
    loop ccl $numargs [ if (> $ccl 0) [ tmpCCO = (concatword $tmpCCO [ ] (getalias (format arg%1 (+ $ccl 2)))) ] [ tmpCCO = (concatword $tmpCCO $arg2) ] ]
    if (!= $arg1 0) [ result (toupper $tmpCCO) ] [ result (tolower $tmpCCO) ]
  ]
]

ingall = 0
const ignoreall   [ if $connected [ ingall = 1; loop ia (+ (highestcn) 1) [ ignore $ia ]; echo (blue)NOTE: (white)All clients currently on the server were ignored. ] ]
const unignoreall [ if $connected [ ingall = 0; clearignored -1; echo (blue)NOTE: (white)All clients currently on the server were unignored. ] ]
const ignoreteam [
  if (curmodeattr team) [
    _arg1 = (toupper $arg1)
    if (|| (strcmp $_arg1 CLA) (strcmp $_arg1 RVSF)) [
      loop itl (+ (highestcn) 1) [
        if (isclient $itl) [
          if (= (player $itl team) (at [0 1] (strcmp $_arg1 RVSF))) [ ignore $itl ]
        ]
      ]
    ] [
      if (checkrange $_arg1 0 1) [
        loop itl (+ (highestcn) 1) [
          if (isclient $itl) [
            if (= (player $itl team) $_arg1) [ ignore $itl ]
          ]
        ]
      ]
    ]
  ] ignoreall
]
const ignoreenemy  [ ignoreteam (at [0 1] (! (player1 team))) ]

// Simple claim-admin script for one single-server.
// Fill in the 3 aliases below, and uncomment the below line to activate.
// bind F3 "customclaimadminscript"
_CAS_serverip = "IP ADDRESS"
_CAS_serverpass = "PASSWORD"
_CAS_servername = "SERVER NAME"
const customclaimadminscript [
  if (strcmp (curserver 1) $_CAS_serverip) [
    if (! (player1 role)) [ setadmin 1 $_CAS_serverpass ] [ setadmin 0 ]
  ] [ echo (red)Error: (white)you're not connected to $_CAS_servername servers ]
]

// Execute other .cfgs/scripts.
run on_quit
run parsestring
run dyngamma
run survival
run autosave
run faq

persistidents 1
execdir scripts
